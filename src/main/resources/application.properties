spring.profiles.active=local
spring.application.name=${spring.application.name}
server.port=${server.port}
spring.banner.charset=${spring.banner.charset}
spring.banner.location=${spring.banner.location}
mobius.view.url=${mobius.view.url}
mobius.download.url=${mobius.download.url}
content.service.storage.type=${content.service.storage.type}
azure.storage.enable=${azure.storage.enable}
azure.storage.containerName=${azure.storage.containerName}
azure.storage.connectionString=${azure.storage.connectionString}
azure.storage.viewURL=${azure.storage.viewURL}
efs.upload.directory.enable=${efs.upload.directory.enable}
efs.upload.directory.uploadDirectory=${efs.upload.directory.uploadDirectory}
spring.cloud.azure.storage.blob.account-name=${spring.cloud.azure.storage.blob.account-name}
spring.cloud.azure.storage.blob.endpoint=${spring.cloud.azure.storage.blob.endpoint}
spring.data.mongodb.database=${spring.data.mongodb.database}
spring.data.mongodb.auto-index-creation=${spring.data.mongodb.auto-index-creation}
spring.data.mongodb.uri=${spring.data.mongodb.uri}
spring.data.mongodb.uuid-representation=${spring.data.mongodb.uuid-representation}
spring.servlet.multipart.enabled=${spring.servlet.multipart.enabled}
spring.servlet.multipart.file-size-threshold=${spring.servlet.multipart.file-size-threshold}
spring.servlet.multipart.maxRequestSize=${spring.servlet.multipart.maxRequestSize}
spring.servlet.multipart.maxFileSize=${spring.servlet.multipart.maxFileSize}
spring.servlet.multipart.resolve-lazily=${spring.servlet.multipart.resolve-lazily}
files.upload-dir=${files.upload-dir}
nginx.scheme=${nginx.scheme}
nginx.host=${nginx.host}
nginx.port=${nginx.port}
nginx.path=${nginx.path}
content.scheme=${content.scheme}
content.host=${content.host}
content.port=${content.port}
content.path=${content.path}
paas.base.url=${paas.base.url}
endpoints.sensitive=${endpoints.sensitive}
endpoints.actuator.enabled=${endpoints.actuator.enabled}
management.security.enabled=${management.security.enabled}
management.endpoint.metrics.enabled=${management.endpoint.metrics.enabled}
management.endpoints.web.exposure.include=${management.endpoints.web.exposure.include}
tf.web.api=${tf.web.api}
tf.web.schema=${tf.web.schema}
spring.main.allow-bean-definition-overriding=${spring.main.allow-bean-definition-overriding}
kafka.producer.enable=${kafka.producer.enable}
kafka.producer.bootstarpServers=${kafka.producer.bootstarpServers}
kafka.producer.keySerializer=${kafka.producer.keySerializer}
kafka.producer.valueSerialzier=${kafka.producer.valueSerialzier}
kafka.producer.acks=${kafka.producer.acks}
kafka.producer.retries=${kafka.producer.retries}
kafka.producer.batchSize=${kafka.producer.batchSize}
kafka.producer.bufferMemory=${kafka.producer.bufferMemory}
kafka.producer.concurrency=${kafka.producer.concurrency}
kafka.producer.timeout=${kafka.producer.timeout}

kafka.producer.poolSize=${kafka.producer.poolSize}
construct.acl.enable=${construct.acl.enable}
construct.acl.actionLogURL=${construct.acl.actionLogURL}
construct.acl.deleteNodeRelationURL=${construct.acl.deleteNodeRelationURL}
construct.acl.createNodeRelationURL=${construct.acl.createNodeRelationURL}
construct.acl.constructListAccessibilityUrl=${construct.acl.constructListAccessibilityUrl}
construct.acl.updateUniverseTenantListUrl=${construct.acl.updateUniverseTenantListUrl}
construct.acl.persistInstance=${construct.acl.persistInstance}
construct.acl.updateInstance=${construct.acl.updateInstance}
construct.acl.deleteInstance=${construct.acl.deleteInstance}
construct.acl.nodeRelationTopic=${construct.acl.nodeRelationTopic}
construct.acl.actionLogTopic=${construct.acl.actionLogTopic}
construct.acl.constructInstanceToSchema=${construct.acl.constructInstanceToSchema}
spring.redis.enable=${spring.redis.enable}
spring.redis.nodes=${spring.redis.nodes}
spring.redis.password=${spring.redis.password}
spring.redis.maxConnections=${spring.redis.maxConnections}
spring.redis.maxIdle=${spring.redis.maxIdle}
spring.redis.minIdle=${spring.redis.minIdle}
spring.redis.testOnBorrow=${spring.redis.testOnBorrow}
spring.redis.testOnReturn=${spring.redis.testOnReturn}
spring.redis.testWhileIdle=${spring.redis.testWhileIdle}
spring.redis.minEvictableIdleTime=${spring.redis.minEvictableIdleTime}
spring.redis.timeBetweenEvictionRuns=${spring.redis.timeBetweenEvictionRuns}
spring.redis.numTestsPerEvictionRun=${spring.redis.numTestsPerEvictionRun}
spring.redis.maxWait=${spring.redis.maxWait}
spring.redis.blockWhenExhausted=${spring.redis.blockWhenExhausted}
spring.redis.durationInDays=${spring.redis.durationInDays}
swagger.server.url=${swagger.server.url}
springdoc.api-docs.path=${springdoc.api-docs.path}
management.metrics.tags.application=${management.metrics.tags.application}
springdoc.swagger-ui.path=${springdoc.swagger-ui.path}
common.thread.enable=${common.thread.enable}
common.thread.prop.threadPoolSize=${common.thread.prop.threadPoolSize}
content.props.baseURL=${content.props.baseURL}
content.props.contentBaseURL=${content.props.contentBaseURL}
content.props.downloadUrl=${content.props.downloadUrl}
content.props.viewUrl=${content.props.viewUrl}
content.props.storageType=${content.props.storageType}
content.props.contentMetadataPrefix=${content.props.contentMetadataPrefix}
content.props.uploadDirectoryBasePath=${content.props.uploadDirectoryBasePath}
content.props.cdnBase=${content.props.cdnBase}
content.props.dataLakeURL=${content.props.dataLakeURL}
content.props.dlSchemaId=${content.props.dlSchemaId}
content.props.schemaId=${content.props.schemaId}
content.props.tenantId=${content.props.tenantId}
content.props.accessibleContentApiUrl=${content.props.accessibleContentApiUrl}
content.props.retrieveRelationShipUrl=${content.props.retrieveRelationShipUrl}
content.props.deleteRelationShipUrl=${content.props.deleteRelationShipUrl}
content.props.generateKeyUrl=${content.props.generateKeyUrl}
content.props.acquireLicenceUrl=${content.props.acquireLicenceUrl}
content.files.uploadDir=${content.files.uploadDir}
content.props.actionLogSchemaId=${content.props.actionLogSchemaId}
content.props.verifyLicenceUrl=${content.props.verifyLicenceUrl}
validation.skip.paths=${validation.skip.paths}

